@using WFJ.Models;
@using WFJ.Service.Model;
@model AddEditPlacementsViewModel
@using fieldType = WFJ.Web.Models.Enums.FieldTypes;

@{
    if (!Model.isEditMode)
    {
        ViewBag.Title = "Add Placement";
    }
    else
    {
        ViewBag.Title = "Edit Placement";
    }

    Layout = "~/Views/Shared/_Layout.cshtml";

    var FieldsGrouped = Model.FormFieldsList.GroupBy(x => x.formSectionID)
                        .Select(x => new
                        {
                            sectionId = x.Key,
                            sectionData = x.GroupBy(a => a.formSectionID).OrderBy(a => a.Key).Select(r => new
                            {
                                rowNo = r.Key,
                                rowData = r.GroupBy(b => b.rowNumber).OrderBy(b => b.Key).AsEnumerable(),
                                sectionHeader = r.Any(b => b.FieldTypeID == (byte)FieldTypes.SectionHeader) ? r.FirstOrDefault(b => b.FieldTypeID == (byte)FieldTypes.SectionHeader).FieldName : null
                            }),
                        }).ToList();

    int Cnt = 0;
    int? userAccess = Model.UserAccess;
    int clientId = Model.ClientId;
    int userType = Model.UserType;
    bool AssociateCounselVisible = Model.FormDetail.ClientID == 1 && Model.FormDetail.FormTypeID != 10;
}
@*<script src="~/vendors/jquery/jquery-3.3.1.min.js"></script>*@

<main>
    <div class="document-center">
        <div class="container-fluid site-width">
            <!-- START: Breadcrumbs-->

            <div class="row">
                <div class="col-md-5">
                    <h4 class="mb-4">@(Model.isEditMode ? "Edit" : "Add") Placement</h4>
                </div>
                <div class="col-md-7">
                    <h4 class="mb-4">@Html.Raw(Model.FormDetail.ClientName ?? "&nbsp;")</h4>
                </div>
            </div>

            <div class="row">
                <div class="col-md-5 col-xl-5">

                    <div class="form-group">
                        <button type="button" class="btn btn-secondary">PDF</button>
                        <a href="@Url.Action("ViewPlacements", "Placements", new { id = Model.FormDetail.ID })" class="btn btn-primary pull-right">Return to List</a>
                    </div>

                    <div class="card mb-4">
                        <div class="card-content">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>@Model.RequestorName</label>
                                            @Html.DropDownListFor(x => x.Request.Requestor, new SelectList(Model.Requestors, "Value", "Text"), "Select", new { @Class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>Assigned Attorney</label>
                                            @Html.DropDownListFor(x => x.Request.AssignedAttorney, new SelectList(Model.AssignedAtorneys, "Value", "Text"), "Select", new { @Class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>Assigned Collector</label>
                                            @Html.DropDownListFor(x => x.Request.AssignedCollectorID, new SelectList(Model.Collectors, "Value", "Text"), "Select", new { @Class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>Status</label>
                                            @*@Html.DropDownListFor(x => x.Request.StatusCode, new SelectList(Model.StatusList, "StatusCode", "Description"), "Select", new { @Class = "form-control" })*@
                                            <select class="form-control" id="Request_StatusCode">
                                                @{
                                                    <option value="">Select</option>
                                                    foreach (var statusList in Model.StatusList)
                                                    {
                                                        var selected = "";
                                                        if (@statusList.StatusCode == Model.Request?.StatusCode)
                                                        {
                                                            selected = "selected";
                                                        }
                                                        <option data-statuslevel="@statusList.StatusLevel" value="@statusList.StatusCode" @selected>@statusList.Description</option>
                                                    }
                                                }

                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>Request Date</label>
                                            @Html.TextBoxFor(x => x.Request.RequestDateString, new { @Class = "form-control jdate-picker" })
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-xl-4">
                                        <div class="form-group">
                                            <label>WFJ File Close Date</label>
                                            @Html.TextBoxFor(x => x.Request.CompletionDateString, new { @Class = "form-control jdate-picker" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">

                                    @*If the value in clients.regionName = "NONE" (case insensitive), then the Region field can be omitted.  You can save a "0" in the database (requests.levelID) for the Region.*@
                                    <div class="col-lg-6 col-xl-4" style="@(Model.FormDetail.ClientLevelName != null && Model.FormDetail.ClientLevelName.ToLower() == "none" ? "display:none;" : "")">
                                        <div class="form-group">
                                            <label>Region</label>
                                            @Html.DropDownListFor(x => x.Request.LevelID, new SelectList(Model.RegionList, "Value", "Text"), "Select", new { @Class = "form-control" })
                                        </div>
                                    </div>

                                    @if (Model.FormDetail.hasAdmin == 1)
                                    {
                                        <div class="col-lg-6 col-xl-4">
                                            <div class="form-group">
                                                <label>Admin Staff</label>
                                                @Html.DropDownListFor(x => x.Request.AssignedAdminStaffID, new SelectList(Model.AdminStaffList, "Value", "Text"), "Select", new { @Class = "form-control" })
                                            </div>
                                        </div>
                                    }

                                </div>
                                <div class="row">
                                    <div class="col-lg-12 col-xl-12">
                                        <div class="form-group">
                                            <span class="status-description"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12 col-xl-12">
                                        <div class="form-group">
                                            <span class="text-danger error-status"></span>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                    <form id="placementForm">
                        @Html.HiddenFor(x => x.Request.FormID)
                        @Html.HiddenFor(x => x.Request.ID)
                        @Html.HiddenFor(x => x.ClientId)

                        @foreach (var section in Model.FormSections)
                        {
                            var ItemsSectionWise = FieldsGrouped.FirstOrDefault(x => x.sectionId == section.formSectionID);
                            if (ItemsSectionWise != null)
                            {
                                var SectionWise = ItemsSectionWise.sectionData;

                                foreach (var sectionData in SectionWise)
                                {
                                    <div class="card mb-4">
                                        <div class="card-content">
                                            @if (sectionData.sectionHeader != null)
                                            {
                                                <div class="card-title">
                                                    <h5 class="p-3">@sectionData.sectionHeader</h5>
                                                </div>
                                            }
                                            <div class="card-body">

                                                @foreach (var row in sectionData.rowData)
                                                {
                                                    <div class="row">

                                                        @foreach (var item in row)
                                                        {
                                                            if (item.FieldTypeID != 0)
                                                            {
                                                                string colClass = item.FieldSize == null ? "col-12" : item.FieldSize.htmlCode;
                                                                string Required = item.Required == 1 ? "required" : "";
                                                                string maxLength = item.Length != null ? "maxlength=" + item.Length : "";
                                                                int? linesLength = item.Length != null && item.Length / 80 > 1 ? item.Length / 80 : null;
                                                                string inputName = "FormFieldsList[" + Cnt + "].FormData.FieldValue";
                                                                string inputValue = item.FormData == null ? null : item.FormData.FieldValue;
                                                                string currencyId = item.FormData == null ? null : Convert.ToString(item.FormData.currencyID);
                                                                var addressData = item.FormAddressData == null ? new FormAddressDataViewModel() : item.FormAddressData;
                                                                var requiredMessage = Html.Raw("data-msg=\"" + item.FieldName + " is required\"");
                                                                var selectHeight = "";
                                                                int accessLevel = Convert.ToInt32(item.AccessLevel);

                                                                var isReadonly = "";
                                                                var isShowDataValue = true;
                                                                var paleYellow = "";
                                                                var isDisabled = "";

                                                                if (Model.isEditMode)
                                                                {
                                                                    if ((accessLevel == 3 || (accessLevel < userAccess && userType != 1))
                                                                   || (accessLevel == 4 && userType != 1)
                                                                   || (accessLevel == 5 && clientId != 1))
                                                                    {
                                                                        isReadonly = "readonly";
                                                                        isShowDataValue = true;
                                                                    }
                                                                    else if ((accessLevel == 5 || accessLevel == 6) && clientId == 1)
                                                                    {
                                                                        paleYellow = "bgColor-paleYellow";
                                                                    }
                                                                    else if (accessLevel == 6 && clientId != 1)
                                                                    {
                                                                        isReadonly = "readonly";
                                                                        isShowDataValue = false;
                                                                    }

                                                                    if (!isShowDataValue)
                                                                    {
                                                                        isDisabled = "disabled";
                                                                        //inputValue = string.Empty;
                                                                    }
                                                                }

                                                                if (item.FieldTypeID == (byte)FieldTypes.MultiSelectSelectionList || item.FieldTypeID == (byte)FieldTypes.MultiSelectCheckboxes)
                                                                {
                                                                    selectHeight = "custom-multiselect-scroll";
                                                                }

                                                                if (item.FieldTypeID != (byte)FieldTypes.SectionHeader) // Section Header
                                                                {
                                                                    <div class="@colClass @selectHeight">
                                                                        <div class="form-group">
                                                                            <input name="FormFieldsList[@Cnt].ID" type="hidden" value="@item.ID" class="formFieldId" />
                                                                            <input name="FormFieldsList[@Cnt].ID" type="hidden" value="@item.FieldTypeID" class="formFieldTypeId" />
                                                                            @if (item.FieldTypeID != (byte)FieldTypes.SectionHeadingTextOnly && item.FieldTypeID != (byte)FieldTypes.TextOnly) // Heading
                                                                            {
                                                                                <label>@item.FieldName</label>
                                                                            }

                                                                            @if (item.FieldTypeID == (byte)FieldTypes.Number)
                                                                            {
                                                                                <div class="d-flex amount">
                                                                                    <input name="FormFieldsList[@Cnt].ID" type="hidden" value="@item.ID" class="formFieldId" />
                                                                                    @if (linesLength == null)
                                                                                    {
                                                                                        <input data-type="text" data-isrequired="@item.Required" type="text" @isDisabled @isReadonly @maxLength name="@inputName" value="@inputValue" pattern="[0-9]" class="form-control @paleYellow answer amount" @requiredMessage />
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <textarea data-isrequired="@item.Required" data-type="textarea" @isDisabled @isReadonly @maxLength name="@inputName" value="@inputValue" pattern="[0-9]" class="form-control @paleYellow answer" rows="@linesLength" @requiredMessage></textarea>
                                                                                    }
                                                                                    <select data-type="dropdown" @isDisabled @isReadonly name="@inputName" class="form-control currency" data-isrequired="@item.Required" @requiredMessage>
                                                                                        @foreach (var option in Model.CurrencyDropdown)
                                                                                        {
                                                                                            var optionSelected = option.Value == currencyId ? "selected" : "";
                                                                                            <option value="@option.Value" @optionSelected>@option.Text</option>
                                                                                        }
                                                                                    </select>
                                                                                </div>
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Date) // date
                                                                            {
                                                                                <input data-type="text" @isDisabled @isReadonly name="@inputName" value="@inputValue" class="form-control jdate-picker @paleYellow answer" data-isrequired="@item.Required" @requiredMessage />
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Text)
                                                                            {
                                                                                if (linesLength == null)
                                                                                {
                                                                                    <input data-type="text" @isDisabled @isReadonly name="@inputName" value="@inputValue" type="text" class="form-control @paleYellow answer" @maxLength data-isrequired="@item.Required" @requiredMessage />
                                                                                }
                                                                                else
                                                                                {
                                                                                    <textarea data-type="textarea" @isDisabled @isReadonly name="@inputName" rows="@linesLength" class="form-control @paleYellow answer" @maxLength data-isrequired="@item.Required" @requiredMessage>@inputValue</textarea>
                                                                                }
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.YesNo)
                                                                            {
                                                                                <div class="answer" data-type="radio" data-name="@inputName" data-isrequired="@item.Required">
                                                                                    <label class="radio-inline">
                                                                                        <input @isDisabled @isReadonly name="@inputName" @(inputValue == "1" ? "checked" : "") class="mr-1" type="radio" value="1" @requiredMessage>Yes
                                                                                    </label>
                                                                                    <label class="radio-inline">
                                                                                        <input @isDisabled @isReadonly name="@inputName" @(inputValue == "0" || inputValue == null ? "checked" : "") class="mr-1" type="radio" value="0">No
                                                                                    </label>
                                                                                </div>
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Telephone) // telephone
                                                                            {
                                                                                <input data-type="text" @isDisabled @isReadonly maxlength="20" name="@inputName" value="@inputValue" type="text" pattern="[A-Za-z0-9]" class="form-control @paleYellow answer" @maxLength data-isrequired="@item.Required" @requiredMessage />
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.TextOnly) // text only
                                                                            {
                                                                                <label>@item.FieldName</label>
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.SelectionList)
                                                                            {
                                                                                <select data-type="dropdown" @isDisabled @isReadonly name="@inputName" class="form-control answer" data-isrequired="@item.Required" @requiredMessage>
                                                                                    <option value="">--Select--</option>
                                                                                    @foreach (var option in item.FormSelectionLists.OrderBy(x => x.SeqNo))
                                                                                    {
                                                                                        var optionSelected = option.Code == inputValue ? "selected" : "";
                                                                                        <option value="@option.Code" @optionSelected>@option.TextValue</option>
                                                                                    }
                                                                                </select>
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Address)
                                                                            {
                                                                                <input data-type="address" @isDisabled @isReadonly value="@addressData.AddressLine1" type="text" style="margin-bottom:1rem;" class="form-control @paleYellow answer address1" maxlength="300" placeholder="Address line 1" data-isrequired="@item.Required" @requiredMessage />
                                                                                <input data-type="address" @isDisabled @isReadonly value="@addressData.AddressLine2" type="text" style="margin-bottom:1rem;" class="form-control @paleYellow  address2" maxlength="80" placeholder="Address line 2" />
                                                                                <div class="row">
                                                                                    <div class="col-md-4">
                                                                                        <input data-type="address" @isDisabled @isReadonly value="@addressData.City" type="text" style="margin-bottom:1rem;" class="form-control @paleYellow  city" maxlength="50" placeholder="City" />
                                                                                    </div>
                                                                                    <div class="col-md-4">
                                                                                        <input data-type="address" @isDisabled @isReadonly value="@addressData.State" type="text" style="margin-bottom:1rem;" class="form-control @paleYellow state" maxlength="3" placeholder="State" />
                                                                                    </div>
                                                                                    <div class="col-md-4">
                                                                                        <input data-type="address" @isDisabled @isReadonly value="@addressData.ZipCode" type="text" style="margin-bottom:1rem;" class="form-control @paleYellow zipcode" maxlength="10" placeholder="Zip code" />
                                                                                    </div>
                                                                                </div>
                                                                                <input data-type="address" value="@addressData.Country" type="text" class="form-control @paleYellow country" maxlength="20" placeholder="Country" />
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Checkbox)
                                                                            {
                                                                                <input data-type="checkbox" @isDisabled @isReadonly name="@inputName" class="answer" type="checkbox" @(inputValue == "1" ? "checked" : "") @requiredMessage />
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.Currency) // currency
                                                                            {
                                                                                if (linesLength == null)
                                                                                {
                                                                                    <input data-type="text" @isDisabled @isReadonly name="@inputName" value="@inputValue" type="number" min="0.01" step="0.01" class="form-control @paleYellow answer" data-isrequired="@item.Required" @requiredMessage />
                                                                                }
                                                                                else
                                                                                {
                                                                                    <textarea data-type="textarea" @isDisabled @isReadonly name="@inputName" value="@inputValue" type="number" min="0.01" step="0.01" class="form-control @paleYellow answer" data-isrequired="@item.Required" @requiredMessage></textarea>
                                                                                }
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.SectionHeadingTextOnly) // Section heading
                                                                            {
                                                                                <h3>@inputValue</h3>
                                                                            }
                                                                            else if (item.FieldTypeID == (byte)FieldTypes.MultiSelectCheckboxes || item.FieldTypeID == (byte)FieldTypes.MultiSelectSelectionList)
                                                                            {
                                                                                @Html.DropDownList(inputName, item.FormSelectionLists.OrderBy(x => x.SeqNo).Select(x => new SelectListItem { Text = x.TextValue, Value = x.Code }), new { @multiple = "multiple", @class = "multiselects answer multi" + Cnt })
                                                                                <script type="text/javascript">
                                                                                    var values = '@inputValue';
                                                                                    if (values.length > 0) {
                                                                                        var valueArray = values.split(',');
                                                                                        $('.multi' + @Cnt).val(valueArray);
                                                                                    }
                                                                                </script>
                                                                            }
                                                                            else
                                                                            {
                                                                                <input data-type="text" @isDisabled @isReadonly name="@inputName" value="@inputValue" type="text" class="form-control @paleYellow answer" @maxLength data-isrequired="@item.Required" @requiredMessage />
                                                                            }

                                                                            @{ Cnt++;}
                                                                            <span class="error-message"></span>
                                                                        </div>
                                                                    </div>
                                                                }
                                                                else
                                                                {

                                                                }

                                                            }

                                                        }

                                                    </div>
                                                }

                                            </div>
                                        </div>
                                    </div>
                                }

                            }

                        }
                        <div class="row">
                            <div class="col-12 pull-right">
                                @if (Model.isEditMode)
                                {
                                    <button type="button" class="btn btn-secondary" onclick="copyPlacement('@Model.Request.FormID','@Model.Request.ID')">Copy</button>

                                    if (Model.UserType == (int)WFJ.Service.Model.UserType.SystemAdministrator)
                                    {
                                        var activeHtml = "Active";
                                        if (Model.Request?.active == 1)
                                        {
                                            activeHtml = "Inactive";
                                        }
                                        <a href="javascript:void(0)" class="btn btn-secondary active-inactive" onclick="activeInactive('@Model.Request.active')">@activeHtml</a>
                                    }
                                }
                                <button class="btn btn-primary" type="button" id="btnSubmit">Submit</button>
                            </div>
                        </div>
                    </form>
                </div>







                <div class="col-md-7 col-xl-7">
                    <div class="custom-tabs">
                        <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                            <li class="nav-item" role="presentation">
                                <a class="nav-link active bg-white mr-3" id="summary-tab" data-toggle="pill" href="#summary" role="tab" aria-controls="summary" aria-selected="true">Summary</a>
                            </li>
                            @if (Model.Request != null && Model.Request.ID > 0)
                            {
                                // Notes
                                <li class="nav-item" role="presentation">
                                    <a class="nav-link bg-white mr-3" id="pills-home-tab" data-toggle="pill" href="#pills-home" role="tab" aria-controls="pills-home" aria-selected="false">Notes</a>
                                </li>
                                // Payments
                                <li class="nav-item" role="presentation">
                                    <a class="nav-link bg-white mr-3" id="pills-profile-tab" data-toggle="pill" href="#pills-profile" role="tab" aria-controls="pills-profile" aria-selected="false">Payments</a>
                                </li>
                                // Attached_File
                                <li class="nav-item" role="presentation">
                                    <a class="nav-link bg-white mr-3" id="attached-tab" data-toggle="pill" href="#attached-file" role="tab" aria-controls="attached-file" aria-selected="false">Attached File</a>
                                </li>
                            }
                            @if (AssociateCounselVisible == true)
                            {
                                <li class="nav-item" role="presentation">
                                    <a class="nav-link bg-white mr-3" id="counsel-tab" data-toggle="pill" href="#counsel" role="tab" aria-controls="counsel" aria-selected="false">Counsel</a>
                                </li>
                            }
                        </ul>
                        <div class="tab-content" id="pills-tabContent">
                            <!--------Summary section------->
                            <div class="tab-pane fade show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <ul class="update-associate">
                                                    @{
                                                        var amountDetail = Model.summaryInformation.Payments;
                                                        <li>Balance Due:<span class="paymentBalanceDue">$@amountDetail.BalanceDue</span></li>
                                                        if (amountDetail.isPaymentFieldShow)
                                                        {
                                                            <li>
                                                                Total Customer Payments/Credits:<span class="paymentTotalPayment">$@amountDetail.TotalPayment</span>
                                                            </li>
                                                            <li>
                                                                Remaining Amount Due:<span class="paymentRemainingAmount">$@amountDetail.RemainingAmount</span>
                                                            </li>
                                                            <li>
                                                                Last Payment Date:<span>@amountDetail.LastPaymentDate</span>
                                                            </li>
                                                        }
                                                        <li>
                                                            Customer Phone:<span>@amountDetail.CustomerPhone</span>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <div class="col-md-6">
                                                <ul class="update-associate">
                                                    @{
                                                        var clientDetail = Model.summaryInformation.Clients;
                                                        <li>Client Name:<span>@clientDetail.Name</span></li>
                                                        <li>
                                                            Address:<span class="text-right">@Html.Raw(clientDetail.Address)</span>
                                                        </li>
                                                        <li>
                                                            Contact:<span>@clientDetail.Contact</span>
                                                        </li>
                                                        <li>
                                                            Phone:<span>@clientDetail.Phone</span>
                                                        </li>
                                                        <li>
                                                            Email:<span>@clientDetail.Email</span>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <ul class="update-associate">
                                                    @{
                                                        var requestorDetail = Model.summaryInformation.Requestors;
                                                        <li>Requestor Name:<span>@requestorDetail.Name</span></li>
                                                        <li>
                                                            Address:<span class="text-right">@Html.Raw(requestorDetail.Address)</span>
                                                        </li>
                                                        <li>
                                                            Phone:<span>@requestorDetail.Phone</span>
                                                        </li>
                                                        <li>
                                                            Email:<span>@requestorDetail.Email</span>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>

                                            @{
                                                if (!string.IsNullOrEmpty(Model.summaryInformation.ClientNotes))
                                                {
                                                    <div class="col-md-6">
                                                        <ul class="update-associate div-client-notes">
                                                            <li><b>Client Notes:</b></li>
                                                            <li>@Model.summaryInformation.ClientNotes</li>
                                                        </ul>
                                                    </div>
                                                }
                                            }
                                        </div>

                                        @{
                                            if (Model.summaryInformation.FlagNotes != null && Model.summaryInformation.FlagNotes.Any())
                                            {
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <ul class="flag-notes">
                                                            @foreach (var flagNotes in Model.summaryInformation.FlagNotes)
                                                            {
                                                                <li><b>@flagNotes.NotesDate: </b>  @flagNotes.Notes </li>
                                                                <br />
                                                            }
                                                        </ul>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                            <!--------Notes section------->
                            <div class="tab-pane fade" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="text-right">
                                            <button type="button" class="btn btn-secondary mb-3" onclick="addNotes()">
                                                Add Notes
                                            </button>
                                            <button type="button" class="btn btn-secondary mb-3" onclick="sendNotes()">
                                                Send Notes
                                            </button>
                                            <button type="button" class="btn btn-secondary mb-3" onclick="hideNotes()">
                                                Hide Notes
                                            </button>
                                            <button type="button" class="btn btn-secondary mb-3" onclick="flagNotes()">
                                                Flag Notes
                                            </button>
                                        </div>

                                        <div class="list-of bg-light p-3 mb-3">
                                            <h4 class="mb-4">List of all Request Notes</h4>
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Balance Due:</label>
                                                        <p class="for-bold paymentBalanceDue">$@amountDetail.BalanceDue</p>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Total Customer Payments/Credits:</label>
                                                        <p class="for-bold paymentTotalPayment">$@amountDetail.TotalPayment</p>
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Remaining Amount Due:</label>
                                                        <p class="for-bold paymentRemainingAmount">$@amountDetail.RemainingAmount</p>
                                                    </div>
                                                </div>
                                            </div>

                                            <ul class="attached-file">
                                                <li>
                                                    Click on a Note Date to view the details of the
                                                    Note, make changes to the Note or delete the
                                                    Note.
                                                </li>
                                                <li>
                                                    Send the Notes checked in the list below to the
                                                    Recipient entered in the space below. You may
                                                    also send the checked note(s) to the Requestor
                                                    or other recipient by checking the box(es)
                                                    below. Press the 'Send Notes' button to send the
                                                    Notice.
                                                </li>
                                            </ul>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label for="inputDate">Send to</label>
                                                        <div class="custom-multiselect-scroll">
                                                            @Html.DropDownList("NotesSendTo", new SelectList(Model.NotesSendToDropdown, "Value", "Text"), new { @Multiple = "multiple" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div style="display:none;" id="hiddenNotes">
                                            <div class="alert alert-info">
                                                <strong id="hiddenNotesCount">0</strong> hidden notes <a href="javascript: showNotes();" class="alert-link">Show all notes</a>.
                                            </div>
                                        </div>

                                        <div class="table-responsive">
                                            <table id="requestNotesTable" style="width:100%;" class="table table-striped layout-primary table-bordered document-center-table"></table>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!--------Payment section------->
                            <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="text-right">
                                            <button type="button" class="btn btn-secondary mb-3" onclick="addPayments()">
                                                Add Payments
                                            </button>
                                            <button type="button" class="btn btn-secondary mb-3" onclick="sendPayments()">
                                                Send Payments
                                            </button>
                                        </div>

                                        <div class="list-of bg-light p-3 mb-3">
                                            <h4 class="mb-4">List of all Payments</h4>
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Balance Due:</label>
                                                        @if (!string.IsNullOrEmpty(amountDetail.BalanceDueCurrency))
                                                        {
                                                            if (amountDetail.BalanceDueCurrency == "USD")
                                                            {
                                                                <p class="for-bold paymentBalanceDue">$@amountDetail.BalanceDue</p>

                                                            }
                                                            else
                                                            {
                                                                <p class="for-bold paymentBalanceDue">@amountDetail.BalanceDue @amountDetail.BalanceDueCurrency</p>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p class="for-bold paymentBalanceDue">@amountDetail.BalanceDue</p>
                                                        }
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Total Customer Payments/Credits:</label>
                                                        @if (!string.IsNullOrEmpty(amountDetail.TotalPaymentCurrency))
                                                        {
                                                            if (amountDetail.TotalPaymentCurrency == "USD")
                                                            {
                                                                <p class="for-bold paymentTotalPayment">$@amountDetail.TotalPayment</p>

                                                            }
                                                            else
                                                            {
                                                                <p class="for-bold paymentTotalPayment">@amountDetail.TotalPayment @amountDetail.TotalPaymentCurrency</p>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p class="for-bold paymentTotalPayment">@amountDetail.TotalPayment</p>
                                                        }
                                                    </div>
                                                </div>

                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        <label>Remaining Amount Due:</label>
                                                        @if (!string.IsNullOrEmpty(amountDetail.RemainingAmountCurrency))
                                                        {
                                                            if (amountDetail.RemainingAmountCurrency == "USD")
                                                            {
                                                                <p class="for-bold paymentRemainingAmount">$@amountDetail.RemainingAmount</p>

                                                            }
                                                            else
                                                            {
                                                                <p class="for-bold paymentRemainingAmount">@amountDetail.RemainingAmount @amountDetail.RemainingAmountCurrency</p>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p class="for-bold paymentRemainingAmount">@amountDetail.RemainingAmount</p>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            @{
                                                if (!string.IsNullOrEmpty(Model.summaryInformation.ClientPaymentNotes))
                                                {
                                                    <div class="col-md-12">
                                                        <ul class="update-associate div-client-payment-notes">
                                                            <li><b>Client Payment Notes:</b></li>
                                                            <li>@Model.summaryInformation.ClientPaymentNotes</li>
                                                        </ul>
                                                    </div>
                                                }
                                            }
                                            <ul class="attached-file">
                                                <li>
                                                    Send the Payments checked in the list below to
                                                    the Recipient entered in the space below. You
                                                    may also send the selected payment(s) to the
                                                    Requestor by checking the box below. Press the
                                                    'Send Payments' button to send the Payment
                                                    Notice.
                                                </li>
                                            </ul>

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label for="inputDate">Send to</label>
                                                        <div class="custom-multiselect-scroll">
                                                            @Html.DropDownList("PaymentSendTo", new SelectList(Model.NotesSendToDropdown, "Value", "Text"), new { @Multiple = "multiple" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="table-responsive">
                                            <table id="paymentsTable" style="width:100%;" class="table table-striped layout-primary table-bordered document-center-table"></table>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!--------Attach file section------->
                            <div class="tab-pane fade" id="attached-file" role="tabpanel" aria-labelledby="attached-tab">
                                <div class="card">
                                    <div class="card-body">
                                        <ul class="attached-file">
                                            <li>Click on 'Remove' to remove a file.</li>
                                            <li>
                                                Be sure to click the 'Submit' button to save
                                                changes to this Service Request form before
                                                attaching files to this Service Request
                                            </li>
                                            <li>
                                                To send a notice to the Requestor and Assigned
                                                Attorney regarding any of the files below, check
                                                the box next to the file and press the 'Submit'
                                                button below.
                                            </li>
                                            <li>To add files, follow the directions below.</li>
                                        </ul>

                                        <div class="row">
                                            <div class="col-md-2">
                                                <div class="form-group">
                                                    <label class="d-block">Send Notice</label>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label>Document Type</label>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label>File Name</label>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="invisible d-block">dummy</label>
                                            </div>
                                        </div>

                                        <div class="row" id="requestDocumentGrid">
                                            @{
                                                if (Model.requestDocumentViewModel != null && Model.requestDocumentViewModel.RequestDocumentDetails.Any())
                                                {
                                                    @Html.Partial("~/Views/Placements/_requestDocumentGrid.cshtml", Model.requestDocumentViewModel)
                                                }
                                            }
                                        </div>

                                        <label class="for-bold">Attach a document to this request</label>
                                        <p>
                                            Attach copies of Purchase Orders, Account
                                            Statements, Unpaid Invoices, Preliminary Notices and
                                            any other pertinent documents by locating the file
                                            from your computer and pressing the "Upload File"
                                            button below. Be sure to save your changes made to
                                            the request information above by pressing the
                                            'Submit' button before attaching files to this
                                            request!
                                        </p>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <label>Upload Document</label>
                                                <div class="custom-file">
                                                    @*@Html.TextBoxFor(x => x.requestDocumentViewModel.documentFile, new { @id = "customFile", @type = "file", @class = "custom-file-input", @name = "documentFile" })*@
                                                    @*<label class="custom-file-label n-custom-file-label" for="customFile"></label>
                                                        <input type="file" class="custom-file-input" id="customFile">
                                                        <label class="custom-file-label n-custom-file-label" for="customFile">Choose file</label>*@
                                                    <input type="file" id="requestDocumentFileUpload" />
                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label>Document Type</label>
                                                    @Html.DropDownListFor(x => x.DocumentId, new SelectList(Model.DocumentType, "Value", "Text"), "Select", new { @Class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox custom-control-inline">
                                                        <input type="checkbox" class="custom-control-input" checked="checked" id="sendNoticeCheckbox">
                                                        <label class="custom-control-label" for="sendNoticeCheckbox">
                                                            To send a notice to the Requestor and
                                                            Assigned Attorney regarding this new file,
                                                            check the box to the right
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-12 text-right">
                                                <button type="button" id="btnUpload" class="btn btn-primary document-search-btn">
                                                    Upload File
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-------- Associate counsel section------->
                            @if (AssociateCounselVisible == true)
                            {
                                <div class="tab-pane fade" id="counsel" role="tabpanel" aria-labelledby="counsel-tab">
                                    <div class="card">
                                        <div class="card-body">
                                            <div id="divAssignedFile" class="hide">
                                                @Html.Partial("~/Views/LocalCounsel/_assignedFile.cshtml", Model.associateCounselModel);
                                            </div>
                                            <div id="divLocalCounselSearch" class="hide">
                                                <div id="divShowLocalCounsel">
                                                    @Html.Partial("~/Views/LocalCounsel/Index.cshtml", Model.localCounselViewModel)
                                                </div>
                                                <div id="divAddLocalCounsel" class="hide">
                                                    <div id="divhtmlAddLocalCount">
                                                        @Html.Partial("~/Views/LocalCounsel/_addLocalCounsel.cshtml", Model.addLocalCounselViewModel)
                                                    </div>
                                                </div>
                                            </div>

                                           
                                        </div>
                                            </div>
                                </div>
                                }
                        </div>
                    </div>
                </div>
            </div>
            <!-- END: Breadcrumbs-->
        </div>
    </div>
</main>



<div class="modal fade" id="addnotesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" style="padding-right: 17px;" aria-modal="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addnotesModallLabel">Add Notes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <input id="currentUserId" type="hidden" value="@Session["UserId"]" />
                <input id="canDeleteNote" type="hidden" value="@(Model.UserType == (int)WFJ.Service.Model.UserType.SystemAdministrator ? 1 : 0)" />

                <div id="addNotesDiv">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    Close
                </button>
                <button type="button" class="btn btn-primary" onclick="addNotesSubmit()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addPaymentModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" style="padding-right: 17px;" aria-modal="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPaymentsModallLabel">Add Payment</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <input id="currentUserId" type="hidden" value="@Session["UserId"]" />
                <div id="addPaymentsDiv">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    Close
                </button>
                <button type="button" class="btn btn-primary" onclick="addPaymentSubmit()">Save changes</button>
            </div>
        </div>
    </div>
</div>



@section scripts{
    <script src="~/Content/manageRequestNotes.js"></script>
    <script src="~/Content/managePayments.js"></script>
    <script src="~/Content/manageLocalCounsel.js"></script>
    <script>

        $(document).ready(function () {
           
            if ("@Model.isEditMode" == "True") {
                GetRequestNotesDataTable();
                GetPaymentsDataTable();
            }
            if ("@Model.IsAssignedFile" == "True") {
                $('#divAssignedFile').removeClass("hide");
            } else {
                $('#divLocalCounselSearch').removeClass("hide");
            }

            GetStatusDescription($("#Request_StatusCode").val());
            $("#Request_StatusCode").change(function () {
                GetStatusDescription($(this).val());
            });

            $(".multiselects").multiselect({
                includeSelectAllOption: true,
                enableFiltering: true,
            });

            $('#btnUpload').click(function () {
                var reqId = parseInt($("#Request_ID").val());
                if (isNaN(reqId)) { reqId = 0; }

                var documentTypeId = parseInt($("#DocumentId").val());
                if (isNaN(documentTypeId)) { documentTypeId = 0; }

                //if (documentTypeId > 0) {

                // Checking whether FormData is available in browser
                if (window.FormData !== undefined) {

                    var fileUpload = $("#requestDocumentFileUpload").get(0);
                    var files = fileUpload.files;

                    // Create FormData object
                    var fileData = new FormData();

                    if (files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        fileData.append(files[i].name, files[i]);
                    }

                    fileData.append('requestId', reqId);
                    fileData.append('documentTypeId', documentTypeId);

                    if ($("#sendNoticeCheckbox").is(":checked")) {
                        fileData.append('sendNote', true);
                    } else {
                        fileData.append('sendNote', false);
                    }

                    $.ajax({
                        url: '/Placements/AddRequestDocument',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: fileData,
                        success: function (response) {
                            if (response.success) {
                                $("#requestDocumentGrid").html(response.html);
                                $.notify(response.message, "success");
                                $("#DocumentId").val("");
                                $("#requestDocumentFileUpload").val("");
                            } else {
                                $.notify(response.message, "danger");
                            }
                        },
                        error: function (err) {
                            $.notify(err.statusText, "danger");
                        }
                    });
                    } else {
                        $.notify("Please select file.", "danger");
                    }
                } else {
                    $.notify("FormData is not supported.", "danger");
                    }
                //} else {
                //    $.notify("Please select document type", "danger");
                //}
            });
        });

        $('.jdate-picker').daterangepicker({
            autoUpdateInput: true,
            singleDatePicker: true,
            showDropdowns: true,
            autoUpdateInput: false,
            locale: { format: 'MM/DD/YYYY' },
            minYear: 2000,
            maxYear: parseInt(moment().format('YYYY'), 10)
        });

        $('.jdate-picker').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('MM/DD/YYYY'));
        });

        var validator = $("#placementForm").validate();

        $("#btnSubmit").click(function () {
            var statusCode = $.trim($("#Request_StatusCode").find(":selected").text());
            var completeDate = $.trim($("#Request_CompletionDateString").val());
            var statusLevel = $("#Request_StatusCode").find(':selected').data("statuslevel");
            if (statusLevel == 2) {
                    if (completeDate.length == 0) {
                        $(".error-status").html("Please select WFJ File Close Date");
                        scrollUp();
                        return false;
                    }
                }

            if (completeDate.length > 0) {
                if (statusLevel != 2) {
                    $(".error-status").html("You must choose a valid status to close this placement.");
                        scrollUp();
                        return false;
                    }
                }

                var isValid = true;
                var savePlacementsViewModel = {};
                var fieldValue = [];
                savePlacementsViewModel.FormId = parseInt($("#Request_FormID").val());
                savePlacementsViewModel.RequestorId = $("#Request_Requestor").val();
                savePlacementsViewModel.AttorneyId = $("#Request_AssignedAttorney").val();
                savePlacementsViewModel.CollectorId = $("#Request_AssignedCollectorID").val();
                savePlacementsViewModel.StatusId = $("#Request_StatusCode").val();
                savePlacementsViewModel.RequestDate = $.trim($("#Request_RequestDateString").val());
                savePlacementsViewModel.WFJFileCloseDate = $.trim($("#Request_CompletionDateString").val());
                savePlacementsViewModel.LevelID = $.trim($("#Request_LevelID").val());
                savePlacementsViewModel.AssignedAdminStaffID = $.trim($("#Request_AssignedAdminStaffID").val());
                var reqId = parseInt($("#Request_ID").val());
                if (isNaN(reqId)) { reqId = 0; }
                savePlacementsViewModel.RequestId = reqId;
                $(".answer").each(function () {
                    var field = {};
                    field.FieldId = $(this).parent().find(".formFieldId").val();
                    var fieldTypeId = $(this).parent().find(".formFieldTypeId").val();

                    if ($(this).data("type") == '@fieldType.text') {
                        field.FieldValue = $.trim($(this).val());
                    }
                    else if ($(this).data("type") == '@fieldType.textarea') {
                        field.FieldValue = $.trim($(this).val());
                    }
                    else if ($(this).data("type") == '@fieldType.dropdown') {
                        field.FieldValue = $(this).find(":selected").val();
                    }
                    else if ($(this).data("type") == '@fieldType.checbox') {
                        if ($(this).is(":checked")) {
                            field.FieldValue = "true";
                        } else {
                            field.FieldValue = "false";
                        }
                    }
                    else if ($(this).data("type") == '@fieldType.radio') {
                        var name = $(this).data("name");
                        field.FieldValue = $("input:radio[name='" + name + "']:checked").val()
                    }
                    else if ($(this).hasClass("multiselects")) {
                        field.FieldId = $(this).parent().parent().find(".formFieldId").val();
                        if ($(this).val().length > 0) {
                            field.FieldValue = $(this).val().join(",");
                        }
                    }
                    else if ($(this).data("type") == '@fieldType.address') {
                        var address = {};
                        address.Address1 = $.trim($(this).val());
                        address.Address2 = $.trim($(this).parent().find(".address2").val());
                        address.City = $.trim($(this).parent().find(".city").val());
                        address.State = $.trim($(this).parent().find(".state").val());
                        address.Country = $.trim($(this).parent().find(".country").val());
                        address.Zipcode = $.trim($(this).parent().find(".zipcode").val());
                        field.AddressValue = address;
                    }

                    if ($(this).hasClass("amount")) {
                        field.CurrencyId = $(this).parent().find(".currency").find(":selected").val();
                    }

                    if ($(this).data("isrequired") == "1") {
                        var fieldLength = $.trim(field.FieldValue).length;
                        if ($(this).data("type") == '@fieldType.address') {
                            fieldLength = $.trim($(this).val()).length
                        }
                        if (fieldLength == 0) {
                            $(this).parent().find(".error-message").html($(this).data("msg"));
                            isValid = false;
                        } else {
                            $(this).parent().find(".error-message").html("");
                            fieldValue.push(field);
                        }
                    } else {
                        fieldValue.push(field);
                    }
                });
                savePlacementsViewModel.FieldValue = fieldValue;
            if (isValid) {
                $.ajax({
                    type: "Post",
                    url: "/Placements/SavePlacement",
                    data: { 'savePlacementsViewModel': savePlacementsViewModel },
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            $("#Request_ID").val(response.requestId);

                            var succesMessage = "@(Model.isEditMode ? "Record Updated Successfully." : "Record Inserted Successfully.")";

                            location.href = "@Url.Action("ViewPlacements", "Placements", new { id= Model.Request.FormID })?success=" + succesMessage;
                        }
                        else {
                        }
                    },
                    error: function (result) {
                    }
                });
            } else {
                scrollUp();
            }
        });

        function GetStatusDescription(id) {
            $.ajax({
                type: "Get",
                url: "/Placements/GetStatusLongDescription?statusCode=" + id + "&formId=" + $("#Request_FormID").val(),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        $(".status-description").html(response.description);
                    }
                    else {
                        $(".status-description").html("");
                    }
                },
                error: function (result) {
                }
            });
        }

        function scrollUp() {
            $('html, body').animate({
                scrollTop: $("body").offset().top
            }, 3000);
        }

        function activeInactive(code) {
            var code = parseInt(code);
            if (isNaN(code)) { code = 0;}
            $.ajax({
                type: "get",
                url: "/Placements/UpdateActiveRequest?code=" + code + "&requestId=" + $("#Request_ID").val(),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {

                        $.notify("Changes saved successfully", "success");

                        $(".active-inactive").prop("onclick", null).off("click");
                        if (code == 1) {
                            $(".active-inactive").html("Active");
                            $(".active-inactive").attr("onclick", "activeInactive('0')");
                        } else {
                            $(".active-inactive").html("Inactive");
                            $(".active-inactive").attr("onclick", "activeInactive('1')");
                        }
                    }
                },
                error: function (result) {
                }
            });
        }

        function copyPlacement(formId, requestId) {
            requestId = parseInt(requestId);
            if (isNaN(requestId)) { requestId = 0; }

            formId = parseInt(formId);
            if (isNaN(formId)) { formId = 0; }

            if (requestId > 0 && formId > 0) {
                window.location.href = "/Placements/AddPlacement?formId=" + formId + "&requestId=" + requestId + "&copy=1";
            }
        }

        function removeRequestDocument(requestDocumentId, requestId, physicalFileName, rowNumber, fileName) {
            var sendNotice = $("#sendRequestDocumentNotice-" + rowNumber).is(":checked");
               $.ajax({
                    type: "Post",
                   url: "/Placements/removeRequestDocument",
                   data: { 'requestDocumentId': requestDocumentId, 'requestId': requestId, 'physicalFileName': physicalFileName, 'sendNotice': sendNotice, 'fileName': fileName},
                    dataType: "json",
                   success: function (response) {
                        if (response.success) {
                            $("#requestDocumentGrid").html(response.html);
                            $.notify("File Deleted Succesfully.", "success");
                        }
                        else {

                        }
                    },
                    error: function (result) {
                    }
                });
        }       
    </script>
}


