@model WFJ.Models.PlacementReuestsViewModel

@{
    ViewBag.Title = "View Placements";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section style{
    @*<link href="~/Scripts/plugins/dataTable/colReorder/css/colReorder.dataTables.min.css" rel="stylesheet" />*@
    <link href="~/Scripts/plugins/dataTable/colReorder/css/colReorder.bootstrap4.min.css" rel="stylesheet" />

    <style>
        .column-close{
            padding:5px;
        }

        .dataTables_wrapper .dt-buttons {
            float: right;
        }
    </style>
}


<main>
    @Html.DisplayFor(m => m.ErrorMessage)

    <div class="document-center view-requst">
        <div class="container-fluid site-width">
            <div class="row">
                <div class="col-md-4 col-xl-3">
                    <h4 class="mb-4">@Html.Raw(Model.FormType ?? "&nbsp;")</h4>
                    <div class="card mb-5 mb-md-0">
                        <div class="card-content">
                            <div class="card-body">
                                @Html.Partial("_ViewPlacementsSearch", Model.placementReuestsFilterViewModel)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-8 col-xl-9">
                    <h4 class="mb-4 text-md-right">@Html.Raw(Model.ClientName ?? "&nbsp;")</h4>
                    <div class="card">
                        <div class="card-body">
                            @Html.Partial("_RequestsGrid")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>


<!-- Modal -->
<div id="columnPopup" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Columns</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label>Select Columns</label>
                            @*<div class="row" id="columnsMultiselect"></div>*@
                            <div class="custom-multiselect-scroll">
                                <div><select id="columnsMultiselect" multiple="multiple"></select></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnSaveColumns">Save changes</button>
            </div>
        </div>
    </div>
</div>





@section scripts{
    @*<script src="~/Scripts/plugins/dataTable/colReorder/js/colReorder.dataTables.min.js"></script>*@
    <script src="~/Scripts/plugins/dataTable/colReorder/js/colReorder.bootstrap4.min.js"></script>
    <script src="~/Scripts/plugins/dataTable/colReorder/js/dataTables.colReorder.min.js"></script>

    @if((string)ViewData["SuccessMessage"] != null)
    {
        <script>
            $.notify("@((string)ViewData["SuccessMessage"])", "success");
        </script>
    }

    <script>
        $('.jdate-picker').daterangepicker({
            autoUpdateInput: true,
            singleDatePicker: true,
            showDropdowns: true,
            autoUpdateInput: false,
            minYear: 2000,
            maxYear: parseInt(moment().format('YYYY'), 10)
        });

        $('.jdate-picker').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('MM/DD/YYYY'));
        });

    </script>


    <script>
        var oTable;
        var isFirstTime = true;

        var columns = JSON.parse('@Html.Raw(Json.Encode( Model.TableColumns))');

        var allColumns = JSON.parse('@Html.Raw(Json.Encode( Model.AllColumnsList))');

        $(document).ready(function () {
            GetFilterDropdownList();
            ReloadVisibleColumns(columns);
            bindMultiselect();
            GetDataTable();
        });

        $("#searchBtn").click(function () {
            var filterString = "";
            $("#filterDropdowns select > option:selected").each(function () {
                if ($(this).text() != "All") {
                    filterString = filterString + $(this).val() + ":" + $(this).text() + ";";
                }
            });
            $('#myDataTable').DataTable().clear().destroy();
            $('#myDataTable').empty();
            GetDataTable(filterString);
        });

        var editColumn = {
            data: "",
            title: '<i data-toggle="modal" data-target="#columnPopup" class="fa fa-plus" style="cursor:pointer;"></i>',
            "render": function (row, type, full) {
                return '<a href="/Placements/AddPlacement?formId=@Model.FormID&requestId=' + full.RequestID + '" class="btn btn-sm btn-primary" title="Edit Request"><i class="fa fa-eye"></i></a>';
            }
        };

        function ReloadVisibleColumns(colArr) {
            colArr.unshift(editColumn);
            columns = colArr.splice(0);
        }

        function ReloadColumnsList(colArr) {
            allColumns = colArr.splice(0);
        }

        function ReloadDatatable() {
            if ($.fn.DataTable.isDataTable("#myDataTable")) {
                $('#myDataTable').DataTable().clear().destroy();
                $('#myDataTable').empty();
            }
            GetDataTable();
            GetFilterDropdownList();
        }               

        var custom_csv = {
            extend: 'csv',
            text: 'CSV',
            exportOptions: {
                format: {
                    body: function (data, row, column, node) {

                        if (typeof data === 'string' || data instanceof String)
                            return data.replace(/&nbsp;/g, '');
                        else
                            return data;
                        //return data.replace(/&nbsp;<(i)[\s\S="]*?<\/(i)>/g, '');
                    }
                },
                columns: 'th:not(:first-child)'
            },
        }

        var wide_pdf = {
            extend: 'pdfHtml5',
            orientation: 'landscape',
            pageSize: 'LEGAL',
            exportOptions: {
                columns: 'th:not(:first-child)'
            },
        };

        function GetFilterDropdownList() {
            var requestor = $('#ddRequestor option:selected').val();
            var assignedAttorney = $('#ddAssignedTo option:selected').val();
            var collector = $('#ddCollector option:selected').val();
            var statusCode = $('#ddStatus option:selected').val();
            var region = $('#ddRegion').val();
            var beginDate = $("#beginDate").val();
            var endDate = $("#endDate").val();
            var archived = $("#cboxArchived").is(":checked");
            var aoData = new Array();
            
            aoData.push({ "name": "formId", "value": "@Model.FormID" });                            
            aoData.push({ "name": "requestor", "value": requestor });
            aoData.push({ "name": "assignedAttorney", "value": assignedAttorney });
            aoData.push({ "name": "collector", "value": collector });
            aoData.push({ "name": "statusCode", "value": statusCode });
            aoData.push({ "name": "region", "value": region });
            aoData.push({ "name": "beginDate", "value": beginDate });
            aoData.push({ "name": "endDate", "value": endDate });
            aoData.push({ "name": "archived", "value": archived });

            $.ajax({
                type: "Post",
                data: aoData,
                url: '/Placements/GetCustomRequestList',
                success: function (resp) {
                    if (resp.Success==true) {
                        $('#filterDropdowns').html(resp.filterHtml);
                    }
                }
            });
        }

        function GetDataTable(data) {
            if ($.fn.DataTable.isDataTable("#myDataTable")) {
                oTable.draw();
            }
            else {
                oTable =
                    $('#myDataTable').DataTable({
                        colReorder: {
                            fixedColumnsLeft: 1,
                            realtime: false
                        },
                        dom: 'lBfrtip',
                        buttons: [custom_csv, wide_pdf],
                        "aaSorting": [[1, "asc"]],
                        "bServerSide": true,
                        "sAjaxSource": "/Placements/GetRequestList",
                        "fnServerData": function (sSource, aoData, fnCallback, oSettings)
                        {
                            var colName = oSettings.aoColumns[oSettings.aaSorting[0][0]].mData;
                            var sDir = oSettings.aaSorting[0][1];
                            var requestor = $('#ddRequestor option:selected').val();
                            var assignedAttorney = $('#ddAssignedTo option:selected').val();
                            var collector = $('#ddCollector option:selected').val();
                            var statusCode = $('#ddStatus option:selected').val();
                            var region = $('#ddRegion').val();
                            var beginDate = $("#beginDate").val();
                            var endDate = $("#endDate").val();
                            var archived = $("#cboxArchived").is(":checked");
                            aoData.push({ "name": "sortCol", "value": colName });
                            aoData.push({ "name": "sortDir", "value": sDir });
                            aoData.push({ "name": "formId", "value": "@Model.FormID" });                            
                            aoData.push({ "name": "filterString", "value": data });
                            aoData.push({ "name": "requestor", "value": requestor });
                            aoData.push({ "name": "assignedAttorney", "value": assignedAttorney });
                            aoData.push({ "name": "collector", "value": collector });
                            aoData.push({ "name": "statusCode", "value": statusCode });
                            aoData.push({ "name": "region", "value": region });
                            aoData.push({ "name": "beginDate", "value": beginDate });
                            aoData.push({ "name": "endDate", "value": endDate });
                            aoData.push({ "name": "archived", "value": archived });
                            aoData.push({ "name": "isFirstTime", "value": isFirstTime });
                            $.ajax({
                                type: "Post",
                                data: aoData,
                                url: sSource,
                                success: function (resp) {
                                    $('#filterDropdowns').html(resp.filterHtml);
                                    return fnCallback(resp);
                                }
                            });
                            isFirstTime = false;
                        },
                        drawCallback: function () {
                            var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
                            pagination.toggle(this.api().page.info().pages > 1);
                        },
                        "columnDefs": [
                            { "orderable": false, "targets": 0 }
                        ],
                        "columns": columns,
                        bProcessing: true,
                        pageLength: 10,
                        "bFilter": false,
                        "paging": true,
                        //bSearching: false,
                        bLengthChange: true,
                        lengthMenu: [10, 25, 50],
                        "bInfo": true,
                        "language": {
                            "zeroRecords": "no search results (too much data)",
                            //"info": "Page _PAGE_ of _PAGES_",
                            "emptyTable": "no records found",
                            "processing": "Processing... Please wait",
                        },

                        // for x icon with column heading
                        "headerCallback": function (nHead, aData, iStart, iEnd, aiDisplay) {
                            oTable.columns().iterator('column', function (settings, column) {

                                if (column > 0) {
                                    $(oTable.column(column).header()).html(settings.aoColumns[column].title + ' <i data-fieldid="' + $(settings.aoColumns[column])[0].fieldID+'" class="fa fa-times column-close" aria-hidden="true"></i>');
                                }
                                    //settings.aoColumns[column].title = settings.aoColumns[column].title + ' <i class="fa fa-times" aria-hidden="true"></i>';
                                //if (settings.aoColumns[column].tooltip !== undefined) {
                                //    //$(oTable.column(column).header()).attr('title', settings.aoColumns[column].tooltip);
                                //}
                            });
                        },

                    });

            }

        }
        
        function updateFields(selectedIDs) {
            $.ajax({
                data: { 'fieldIDs': selectedIDs, formId: '@Model.FormID' },
                traditional: true,
                url: '@Url.Action("UpdateUserColumns", "Placements")',
                type: 'post',
                dataType: 'json',
                success: function (resp) {
                    if (resp.success == true) {

                        ReloadVisibleColumns(resp.visibleColumns);
                        ReloadColumnsList(resp.allColumns);
                        ReloadDatatable();
                        $("#columnPopup").modal("hide");
                    }
                    else {
                        alert("There was an error");
                    }
                }
            });

        }



        function bindMultiselect() {
            $('#columnsMultiselect').multiselect('destroy');
            $("#columnsMultiselect").empty();

            var options = '';
            $.each(allColumns, function (index, item) {
                if (item.visible == false) {
                    var isSelected = item.visible == true ? 'selected="selected"' : "";
                    options = options + '<option value="' + item.fieldID + '" ' + isSelected + '>' + item.title + '</option>';
                    //options = options + '<div class="col-sm-6 mb-2">' +
                    //    '<div class="custom-control custom-checkbox custom-control-inline">' +
                    //    '<input id="cbox' + item.fieldID + '" type="checkbox" ' + isSelected + ' value=' + item.fieldID + ' class="custom-control-input">' +
                    //    '<label class="custom-control-label" for="cbox' + item.fieldID + '">' + item.title + '</label>' +
                    //    '</div>' +
                    //    '</div>';
                }
            });
            $("#columnsMultiselect").html(options);
            $("#columnsMultiselect").multiselect({
                includeSelectAllOption: true,
                enableFiltering: true,
            });
        }

        $("#columnPopup").on("show.bs.modal", function () {
            bindMultiselect();
        });

        $("#btnSaveColumns").click(function () {

            var selectedIDs = $("#columnsMultiselect").val();
            //$("#columnsMultiselect input:checked").each(function () {
            //    selectedIDs.push($(this).val());
            //});
            var fields = [];
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].hasOwnProperty('fieldID') && columns[i].data != "") {
                    fields.push(columns[i].fieldID);
                }
            }
            for (var i = 0; i < selectedIDs.length; i++) {
                fields.push(Number(selectedIDs[i]));
            }

            updateFields(fields);
        });

        $("table").on("click", ".column-close", function (event) {
            event.stopPropagation();
            var fieldId = $(this).data("fieldid");

            var fields = [];
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].fieldID != fieldId && columns[i].hasOwnProperty('fieldID') && columns[i].data != "") {
                    fields.push(columns[i].fieldID);
                }
            }

            updateFields(fields);
        });

        $(function () {
            oTable.on('column-reorder', function (e, settings, details) {
                if (details.drop === true) {
                    var fields = [];
                    if (columns.length == details.mapping.length) {
                        for (var i = 1; i < details.mapping.length; i++) {
                            var newSeqNo = oTable.colReorder.transpose(i);
                            fields.push({ fieldID: columns[i].fieldID, seqNo: newSeqNo });
                        }

                        $.ajax({
                            data: JSON.stringify({ 'fieldIDs': fields, formId: '@Model.FormID' }),
                            contentType: 'application/json; charset=utf-8',
                            url: '@Url.Action("UpdateColumnSequence", "Placements")',
                            type: 'post',
                            dataType: 'json',
                            success: function (resp) {
                                if (resp.success == true) {

                                    ReloadVisibleColumns(resp.visibleColumns);
                                    ReloadDatatable();

                                }
                                else {
                                    alert("There was an error while saving the sequence");
                                }
                            }
                        });

                    }
                    else {
                        alert("There was an error");
                    }
                }

            });
        });
    </script>

}